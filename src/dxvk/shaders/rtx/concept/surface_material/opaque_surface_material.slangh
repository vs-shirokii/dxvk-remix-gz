/*
* Copyright (c) 2023, NVIDIA CORPORATION. All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a
* copy of this software and associated documentation files (the "Software"),
* to deal in the Software without restriction, including without limitation
* the rights to use, copy, modify, merge, publish, distribute, sublicense,
* and/or sell copies of the Software, and to permit persons to whom the
* Software is furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
* THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
* DEALINGS IN THE SOFTWARE.
*/
#pragma once

// Opaque Surface Material Functions

// TODO: Remove useless parameter surfaceMaterialIndex
OpaqueSurfaceMaterial opaqueSurfaceMaterialCreate(uint16_t surfaceMaterialIndex, MemoryPolymorphicSurfaceMaterial memoryPolymorphicSurfaceMaterial)
{
  // Decode the Opaque Surface Material from the packed memory representation
  // Note: Opaque type is known in advance

  OpaqueSurfaceMaterial opaqueSurfaceMaterial;

  const u16vec2 data00 = unpack16(memoryPolymorphicSurfaceMaterial.data0.x);
  const u16vec2 data01 = unpack16(memoryPolymorphicSurfaceMaterial.data0.y);
  const u16vec2 data02 = unpack16(memoryPolymorphicSurfaceMaterial.data0.z);
  const u16vec2 data03 = unpack16(memoryPolymorphicSurfaceMaterial.data0.w);
  const u16vec2 data10 = unpack16(memoryPolymorphicSurfaceMaterial.data1.x);
  const u16vec2 data11 = unpack16(memoryPolymorphicSurfaceMaterial.data1.y);
  const u16vec2 data12 = unpack16(memoryPolymorphicSurfaceMaterial.data1.z);
  // Note: Last two bits of data1.w (or data13 in this case) are reserved for common polymorphic type
  const u16vec2 data13 = unpack16(memoryPolymorphicSurfaceMaterial.data1.w);
  opaqueSurfaceMaterial.flags = (data13.x & 0xFF);
  if (opaqueSurfaceMaterial.flags & OPAQUE_SURFACE_MATERIAL_FLAG_HAS_ALBEDO_TEXTURE) {
    opaqueSurfaceMaterial.albedoOpacityTextureIndex = data00.x;
    opaqueSurfaceMaterial.albedoOpacityConstant = f16vec4(0.0,0.0,0.0,unorm8ToF16(uint8_t(data00.y >> 8u)));
  } else {
    opaqueSurfaceMaterial.albedoOpacityTextureIndex = BINDING_INDEX_INVALID;
    opaqueSurfaceMaterial.albedoOpacityConstant = f16vec4(unorm8ToF16(uint8_t(data00.x)), unorm8ToF16(uint8_t(data00.x >> 8u)), unorm8ToF16(uint8_t(data00.y)), unorm8ToF16(uint8_t(data00.y >> 8u)));
  }
  opaqueSurfaceMaterial.tangentTextureIndex = data01.x;

  if (opaqueSurfaceMaterial.flags & OPAQUE_SURFACE_MATERIAL_FLAG_HAS_ROUGHNESS_TEXTURE) {
    opaqueSurfaceMaterial.roughnessTextureIndex = data01.y;
    opaqueSurfaceMaterial.roughnessConstant = 0.0;
  } else {
    opaqueSurfaceMaterial.roughnessTextureIndex = BINDING_INDEX_INVALID;
    opaqueSurfaceMaterial.roughnessConstant = unorm8ToF16(uint8_t(data01.y));
  }

  if (opaqueSurfaceMaterial.flags & OPAQUE_SURFACE_MATERIAL_FLAG_HAS_METALLIC_TEXTURE) {
    opaqueSurfaceMaterial.metallicTextureIndex = data02.x;
    opaqueSurfaceMaterial.metallicConstant = 0.0;
  } else {
    opaqueSurfaceMaterial.metallicTextureIndex = BINDING_INDEX_INVALID;
    opaqueSurfaceMaterial.metallicConstant = unorm8ToF16(uint8_t(data02.x));
  }

  if (opaqueSurfaceMaterial.flags & OPAQUE_SURFACE_MATERIAL_FLAG_HAS_EMISSIVE_TEXTURE) {
    opaqueSurfaceMaterial.emissiveColorTextureIndex = data02.y;
    opaqueSurfaceMaterial.emissiveColorConstant = f16vec3(0.0);
  } else {
    opaqueSurfaceMaterial.emissiveColorTextureIndex = BINDING_INDEX_INVALID;
    opaqueSurfaceMaterial.emissiveColorConstant = f16vec3(unorm8ToF16(uint8_t(data02.y)), unorm8ToF16(uint8_t(data02.y >> 8u)), unorm8ToF16(uint8_t(data03.x)));
  }

  opaqueSurfaceMaterial.anisotropy = snorm8ToF16(uint8_t(data03.x >> 8u));
  opaqueSurfaceMaterial.normalTextureIndex = data03.y;
  opaqueSurfaceMaterial.emissiveIntensity = uint16BitsToHalf(data10.x);
  opaqueSurfaceMaterial.samplerIndex = data10.y;
  opaqueSurfaceMaterial.displaceIn = uint16BitsToHalf(data11.x);
  opaqueSurfaceMaterial.heightTextureIndex = data11.y;

  if (opaqueSurfaceMaterial.flags & OPAQUE_SURFACE_MATERIAL_FLAG_HAS_SUBSURFACE_MATERIAL) {
    opaqueSurfaceMaterial.subsurfaceMaterialIndex = data12.x;
  } else {
    opaqueSurfaceMaterial.subsurfaceMaterialIndex = BINDING_INDEX_INVALID;
  }

  opaqueSurfaceMaterial.thinFilmThicknessConstant = unorm8ToF16(uint8_t(data12.y >> 8u));

  return opaqueSurfaceMaterial;
}

// Subsurface Material Functions
SubsurfaceMaterial subsurfaceMaterialCreate(MemoryPolymorphicSurfaceMaterial memoryPolymorphicSurfaceMaterial)
{
  // Decode the Subsurface Surface Material from the packed memory representation
  // Note: Subsurface type is known in advance

  SubsurfaceMaterial subsurfaceMaterial;

  const u16vec2 data00 = unpack16(memoryPolymorphicSurfaceMaterial.data0.x);
  const u16vec2 data01 = unpack16(memoryPolymorphicSurfaceMaterial.data0.y);
  const u16vec2 data02 = unpack16(memoryPolymorphicSurfaceMaterial.data0.z);
  const u16vec2 data03 = unpack16(memoryPolymorphicSurfaceMaterial.data0.w);
  const u16vec2 data10 = unpack16(memoryPolymorphicSurfaceMaterial.data1.x);
  const u16vec2 data13 = unpack16(memoryPolymorphicSurfaceMaterial.data1.w);

  const uint8_t flags = (data13.x & 0xFF);

  if (flags & SUBSURFACE_MATERIAL_FLAG_HAS_TRANSMITTANCE_TEXTURE)
  {
    subsurfaceMaterial.subsurfaceTransmittanceTextureIndex = data00.x;
  }
  else
  {
    subsurfaceMaterial.subsurfaceTransmittanceTextureIndex = BINDING_INDEX_INVALID;
  }

  if (flags & SUBSURFACE_MATERIAL_FLAG_HAS_THICKNESS_TEXTURE)
  {
    subsurfaceMaterial.subsurfaceThicknessTextureIndex = data00.y;
  }
  else
  {
    subsurfaceMaterial.subsurfaceThicknessTextureIndex = BINDING_INDEX_INVALID;
    subsurfaceMaterial.measurementDistance = uint16BitsToHalf(data00.y);
  }

  if (flags & SUBSURFACE_MATERIAL_FLAG_HAS_SINGLE_SCATTERING_ALBEDO_TEXTURE)
  {
    subsurfaceMaterial.subsurfaceSingleScatteringAlbedoTextureIndex = data01.x;
  }
  else
  {
    subsurfaceMaterial.subsurfaceSingleScatteringAlbedoTextureIndex = BINDING_INDEX_INVALID;
  }

  subsurfaceMaterial.volumetricAttenuationCoefficient = f16vec3(uint16BitsToHalf(data01.y), uint16BitsToHalf(data02.x), uint16BitsToHalf(data02.y));
  subsurfaceMaterial.singleScatteringAlbedo = f16vec3(uint16BitsToHalf(data03.x), uint16BitsToHalf(data03.y), uint16BitsToHalf(data10.x));
  subsurfaceMaterial.volumetricAnisotropy = uint16BitsToHalf(data10.y);

  return subsurfaceMaterial;
}

SubsurfaceMaterial subsurfaceMaterialCreate(const SubsurfaceMaterialInteraction subsurfaceMaterialInteraction)
{
  SubsurfaceMaterial subsurfaceMaterial;
  subsurfaceMaterial.volumetricAttenuationCoefficient = transmittanceToAttenuationCoefficient(r5g6b5ToColor(subsurfaceMaterialInteraction.packedTransmittanceColor), subsurfaceMaterialInteraction.measurementDistance);
  subsurfaceMaterial.measurementDistance = subsurfaceMaterialInteraction.measurementDistance;
  subsurfaceMaterial.singleScatteringAlbedo = r5g6b5ToColor(subsurfaceMaterialInteraction.packedSingleScatteringAlbedo);
  subsurfaceMaterial.volumetricAnisotropy = snorm8ToF16(subsurfaceMaterialInteraction.volumetricAnisotropy);

  return subsurfaceMaterial;
}

uint16_t getSubsurfaceMaterialIndex(const MemoryPolymorphicSurfaceMaterial memoryPolymorphicSurfaceMaterial, inout uint16_t samplerIndex)
{
  const u16vec2 data10 = unpack16(memoryPolymorphicSurfaceMaterial.data1.x);
  const u16vec2 data12 = unpack16(memoryPolymorphicSurfaceMaterial.data1.z);
  const u16vec2 data13 = unpack16(memoryPolymorphicSurfaceMaterial.data1.w);
  samplerIndex = data10.y;

  const uint8_t flags = (data13.x & 0xFF);
  if (flags & OPAQUE_SURFACE_MATERIAL_FLAG_HAS_SUBSURFACE_MATERIAL)
  {
    return data12.x;
  }
  else
  {
    return BINDING_INDEX_INVALID;
  }
}
